```
mkdir mysite
cd mysite
python -m venv venv

# 가상환경속으로 들어가기
.\venv\Scripts\activate # window
.\venv\Script\activate.bat # window
source ./venv/bin/activate # mac, linux

# window에서 오류가 뜰 경우
+ CategoryInfo          : 보안 오류: (:) [], PSSecurityException
+ FullyQualifiedErrorId : UnauthorizedAccess
# 이걸 입력해주세요.
Set-ExecutionPolicy Unrestricted

pip install django
django-admin startproject tutorialdjango .
python manage.py migrate
python manage.py runserver

# settings.py에서 접속할 수 있는 사람 설정
ALLOWED_HOSTS = ['*'] # 28번째 줄에 접속할 수 있는 사람을 모든 사람으로 변경

python manage.py startapp main
python manage.py startapp blog

# settings.py 에서 33번째 라인 수정
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'main',
    'blog',
]

* test라는 이름 자체를 사용하지 않기를 권합니다.

###################################
# tutorialdjango > urls.py
from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('main.urls')),
    path('blog/', include('blog.urls')),
]

###################################
# main > urls.py
from django.urls import path
from . import views

urlpatterns = [
    path('', views.index, name='index'),
    path('about/', views.about, name='about'),
    path('contact/', views.contact, name='contact'),
]

###################################
# main > views.py
from django.shortcuts import render

def index(request):
    return render(request, 'main/index.html')

def about(request):
    return render(request, 'main/about.html')

def contact(request):
    return render(request, 'main/contact.html')

###################################
# blog > urls.py

from django.urls import path
from . import views

urlpatterns = [
    path('', views.blog, name='blog'),
    path('<int:pk>/', views.post, name='post'),
    path('test/', views.test, name='test'),
]

###################################
# blog > views.py
from django.shortcuts import render

def blog(request):
    return render(request, 'blog/blog.html')

def post(request, pk):
    return render(request, 'blog/post.html')

def test(request):
    data = [
        {'title': 'Post 1', 'text': 'Text 1', 'pk': 1},
        {'title': 'Post 2', 'text': 'Text 2', 'pk': 2},
        {'title': 'Post 3', 'text': 'Text 3', 'pk': 3},
    ]
    #####
    # return HttpResponse('hello world')

    ######
    # return HttpResponse('<h1>hello world</h1>')

    ######
    #s = '<h1>{{title}}</h1><p>{{text}}</p>'
    # return HttpResponse(s) # 3 # 랜더가 하는 역할은 이것을 아래처럼 바꿔주는 것입니다.
    # return HttpResponse(s.replace('{{title}}', data[0]['title']).replace('{{text}}', data[0]['text'])) # 4

    ######
    # text.txt파일 만들기
    # header = '<h2>hello world</h2>'
    # main = render_to_string('blog/test.txt',{'data':data[0]})
    # footer = '<p>bye world</p>'

    # return HttpResponse(header+main+footer)

    return JsonResponse(data, safe=False)

(수정 후)

def blog(request):
    db = Post.objects.all()
    context = {
        'db': db,
    }
    return render(request, 'blog/blog.html', context)

def post(request, pk):
    db = Post.objects.get(pk=pk)
    context = {
        'db': db,
    }
    return render(request, 'blog/post.html', context)

def test(request):
    return render(request, 'blog/test.txt')

###################################
# templates 기본 폴더 변경합시다!

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        # .. 생략 ..
    },
]

# mysite > main > about.html
# mysite > main > index.html
# mysite > main > contact.html
# mysite > blog > blog.html # 어차피 만들 것이라 미리 생성하겠습니다.
# mysite > blog > post.html # 어차피 만들 것이라 미리 생성하겠습니다.


여기는 참고만 하기
###################################
# 마이크로식 운영 test
# index.html을 가상환경 바깥에 어딘가에 만듭니다. liveserver로 구동시키셔야 합니다.
<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title></title>
</head>
<body>
    <script>
        // http://127.0.0.1:8000/blog 에서 fetch로 데이터를 json 형식으로 가져와서
        // 화면에 출력하는 코드입니다.
        // 다만 지금 cors 문제로 실행이 안됩니다.
        fetch('http://127.0.0.1:8000/blog/test/')
        .then(function(response) {
            return response.json();
        })
        .then(function(myJson) {
            console.log(myJson);
        });

        // https://blog.hometowndeveloper.com/63
    </script>
</body>
</html>
###################################
pip install django-cors-headers

# settings.py
INSTALLED_APPS = [
    'corsheaders', # 최상단에 놓으세요!
    ... 생략 ...
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware', # 최상단에 놓으세요!
    ... 생략 ... 
]

CORS_ORIGIN_ALLOW_ALL = True # 모든 URL에 요청에 대해 허용!

CORS_ALLOW_CREDENTIALS = True

# CORS_ORIGIN_WHITELIST = [
#         'http://127.0.0.1:5500',
#         'http://127.0.0.1:8000',
#         'http://localhost:8000',
#         'http://localhost:5500',
# ]

###################################
blog > models.py
# db 생성

from django.db import models

class Post(models.Model):
    title = models.CharField(max_length=100)
    contents = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True) # 처음 생성될 때만
    updated_at = models.DateTimeField(auto_now=True) # 수정될 때마다

    def __str__(self):
        time = self.created_at.strftime('%Y-%m-%d %H:%M')
        return f'제목: {self.title}, 시간: {time}'

###################################
# db적용

python manage.py makemigrations
python manage.py migrate

###################################
# blog > admin.py

from django.contrib import admin
from .models import Post

admin.site.register(Post)

###################################
# db 계정 설정
python manage.py createsuperuser

ko
ehddn2202@gmail.com
ko12345@

##################################
# templates > blog > blog.html

<h1>게시판</h1>
<ul>
    {% for post_detail in db %}
    <li>
        <a href="{% url 'post' post_detail.id %}">{{ post_detail.title }}</a>
    </li>
    {% endfor %}
</ul>

<p>{% url 'blog' %}</p>
<p>{% url 'post' 1 %}</p>

#################################
# templates > blog > post.html

<h1>게시판</h1>
<p>{{db.title}}</p>
<p>{{db.contents}}</p>
<p>{{db.updated_at}}</p>
<a href="{% url 'blog' %}">뒤로가기</a>

#################################
template 상속은 일단 제외,,,
코드만 남겨놓기

# 템플릿 태그, 템플릿 상속
## 템플릿 태그
{{ 변수명 }}
{% 템플릿 문법 %}

## 템플릿 상속
* 홈페이지를 조각내어 각각에 html로 관리하는 기법
* 부모 입장

... 위 코드 ...
{% block 이름 %}
{% endblock %}
... 아래 코드 ...

* 자식 입장

{% extends '부모html파일명' %}
{% block 이름 %}
... 실제 사용한 코드 ...
{% endblock %}

##################################
파워쉘 실습


python manage.py shell

from blog.models import Post
a = Post.objects.all()

dir(a) 확인


쉘 명령어
eq - equal ( = )
ne - not equal ( <> )
lt - little ( < )
le - little or equal ( <= )
gt - greater ( > )
ge - greater or equal ( >= )


ORM, Django Shell, QuerySet : https://paullabworkspace.notion.site/ORM-Django-Shell-QuerySet-4c1ad20735ce44c483d6ff9071bd092c?pvs=4
공식문서 : https://docs.djangoproject.com/en/4.2/ref/models/querysets/#django.db.models.query.QuerySet
jupyter notebook 사용 : https://youtu.be/Di5CYnoHYRk


>>> from blog.models import Post
>>> Post.objects.all()
<QuerySet [<Post: 제목: 1, 시간: 2023-10-11 02:19>, <Post: 제목: 2, 시간: 2023-10-11 02:19>, <Post: 제목: 3, 시간: 2023-10-11 02:19>]>
>>> a = Post.objects.all()
>>> type(a)
<class 'django.db.models.query.QuerySet'>
>>> dir(a)
[... 생략 ..., 'aaggregate', 'abulk_create', 'abulk_update', 'acontains', 'acount', 'acreate', 'adelete', 'aearliest', 'aexists', 'aexplain', 'afirst', 'aget', 'aget_or_create', 
'aggregate', 'ain_bulk', 'aiterator', 'alast', 'alatest', 'alias', 'all', 'annotate', 'as_manager', 'aupdate', 'aupdate_or_create', 'bulk_create', 'bulk_update', 'complex_filter', 'contains', 'count', 'create', 'dates', 'datetimes', 'db', 'defer', 'delete', 'difference', 'distinct', 'earliest', 'exclude', 'exists', 'explain', 'extra', 'filter', 'first', 'get', 'get_or_create', 'in_bulk', 'intersection', 'iterator', 'last', 'latest', 'model', 'none', 'only', 'order_by', 'ordered', 'prefetch_related', 'query', 'raw', 'resolve_expression', 'reverse', 'select_for_update', 'select_related', 'union', 'update', 'update_or_create', 'using', 'values', 'values_list']

>>> Post.objects.all().order_by('-pk')
<QuerySet [<Post: 제목: 3, 시간: 2023-10-11 02:19>, <Post: 제목: 2, 시간: 2023-10-11 02:19>, <Post: 제목: 1, 시간: 2023-10-11 02:19>]>
>>> Post.objects.all().count()
3   
>>> q = Post.objects.get(id=1)
>>> q
<Post: 제목: 1, 시간: 2023-10-11 02:19>
>>> q = Post.objects.get(pk=1) 
>>> q
<Post: 제목: 1, 시간: 2023-10-11 02:19>
>>> q.title
'1' 
>>> q.id
1   
>>> q.pk
1 

>>> Post.objects.filter(title='1')
>>> Post.objects.filter(id=1)
>>> Post.objects.filter(title__contains='test')
>>> Post.objects.filter(contents__contains='2')
>>> Post.objects.filter(contents__contains='2').filter(title__contains='test')
>>> Post.objects.filter(contents__contains='2').filter(title__contains='2')
>>> Post.objects.filter(id__lt=3)
>>> Post.objects.filter(id__gt=3)


eq - equal ( = )
ne - not equal ( <> )
lt - little ( < )
le - little or equal ( <= )
gt - greater ( > )
ge - greater or equal ( >= )

# User에게 받아서 이 코드를 실행시키면 게시물을 생성할 수 있습니다!
>>> q = Post.objects.create(title='test sample', contents='222')   
>>> q
<Post: 제목: test sample, 시간: 2023-10-11 04:19>
>>> q.title
'test sample'
>>> q.save()

>>> Post.objects.all().filter(contents__contains='2')
<QuerySet [<Post: 제목: 2, 시간: 2023-10-11 02:19>, <Post: 제목: test sample, 시간: 2023-10-11 04:19>]>
>>> Post.objects.all().filter(contents__contains='2').filter(title__contains='sample')
<QuerySet [<Post: 제목: test sample, 시간: 2023-10-11 04:19>]>

>>> q = Post.objects.get(pk=4)
>>> q.delete()
(1, {'blog.Post': 1})
>>> q
<Post: 제목: test sample, 시간: 2023-10-11 04:19>
>>> Post.objects.all()
<QuerySet [<Post: 제목: 1, 시간: 2023-10-11 02:19>, <Post: 제목: 2, 시간: 2023-10-11 02:19>, <Post: 제목: 3, 시간: 2023-10-11 02:19>]>


Create
Read
Update
Delete

###################################
# 아래는 test 용도의 예제입니다.
# 이런 코드를 실무에서 사용하지 않습니다.
save, delete 구현
###################################
# blog > urls.py

from django.urls import path
from . import views

urlpatterns = [
    path('', views.blog, name='blog'),
    path('<int:pk>/', views.post, name='post'),
    path('create/', views.create, name='create'),
    path('update/<int:pk>/', views.update, name='update'),
    path('delete/<int:pk>/', views.delete, name='delete'),
]
###################################
# blog > views.py
from django.shortcuts import render, redirect
from .models import Post

def blog(request):
    db = Post.objects.all()
    context = {
        'db': db,
    }
    return render(request, 'blog/blog.html', context)

def post(request, pk):
    db = Post.objects.get(pk=pk)
    context = {
        'db': db,
    }
    return render(request, 'blog/post.html', context)

def test(request):
    return render(request, 'blog/test.txt')

def posttest(request, pk):
    q = Post.objects.create(title=f'{pk}', contents=f'{pk}{pk}')
    q.save()
    return redirect('blog')

def postdel(request, pk):
    q = Post.objects.get(pk=pk)
    q.delete()
    q.save()
    return redirect('blog')

##################################
이미지 넣기

pip install Pillow

blog > models.py
from django.db import models

class Post(models.Model):
    title = models.CharField(max_length=100)
    contents = models.TextField()
    # main_image = models.ImageField(upload_to='blog/', blank=True, null=True) # upload_to='blog/' : blog 폴더 안에 저장
    main_image = models.ImageField(blank=True, null=True)
    created_at = models.DateTimeField(auto_now_add=True) # 처음 생성될 때만
    updated_at = models.DateTimeField(auto_now=True) # 수정될 때마다

    def __str__(self):
        time = self.created_at.strftime('%Y-%m-%d %H:%M')
        return f'제목: {self.title}, 시간: {time}'


> settings.py 맨 밑에 추가

MEDIA_ROOT = BASE_DIR / 'media'
MEDIA_URL = '/media/'



>tutorialdjango > urls.py에 추가

from django.contrib import admin
from django.urls import path, include
from django.conf.urls.static import static
from django.conf import settings

urlpatterns = [
    path('admin/', admin.site.urls),
    path('blog/', include('blog.urls')),
]

urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)


db를 수정했다면 꼭 다시
python manage.py makemigrations
python manage.py migrate 
해주자

###################################

검색 기능

blog > blog.html
<h1>게시판</h1>
<form action="" method="get">
    <input name = 'q' type="search">
    <button type="submit">검색</button> 
</form>
<ul>
    {% for post_detail in db %}
    <li>
        <a href="{% url 'post' post_detail.id %}">{{ post_detail.title }}</a>
        <p>{{post_detail.contents}}</p>
    </li>
    {% endfor %}
</ul>


blog> views.py

from django.shortcuts import render, redirect
from .models import Post
from django.db.models import Q

def blog(request):
    if request.GET.get('q'):
        q = request.GET.get('q')
        db = Post.objects.filter(Q(title__icontains=q) | Q(contents__icontains=q)).distinct()
    else:
        db = Post.objects.all()
    context = {
        'db': db,
    }
    return render(request, 'blog/blog.html', context)

def post(request, pk):
    db = Post.objects.get(pk=pk)
    context = {
        'db': db,
    }
    return render(request, 'blog/post.html', context)


